<template>
  <div id="grid">
    <div id="forms">
      <div id="control-header">
        <p>Currenty editing: {{curPriceList}}</p>
        <input type="text" name="" id=""><button @click.prevent="">Save</button>
        <select name="" id="">
          <option disabled value="">Choose a price list</option>
          <option value=""></option>
        </select>
      </div>
      <hr>
      <div class="xml-fields-wrapper">
        <input type="checkbox" id="spoiler2" />
        <label for="spoiler2">Show/Hide Heading</label>

        <!-- header and shop description -->
        <header-shop-descr :xmlValues="xmlValues"></header-shop-descr>

        <hr>

        <!-- EDITING OFFER CONTAINER -->
        <!-- setup @click.prevent -->
        <div class="offer">
          <h4>Offers</h4>
          <div>Offer ID:
            <!-- v-model.number - converts the input to number -->
            <input disabled v-if="!IdEditable" v-model="xmlValues.Offers[curOfferI].Id">
            <input v-else-if="IdEditable" @blur="verifyID(tempOfferId)" maxlength="5" :placeholder="xmlValues.Offers[curOfferI].Id" id="offer-id" type="text" v-model="tempOfferId">
            Edit: <input type="checkbox" v-model="IdEditable">
          </div>
          <p>Name: <input type="text" v-model="xmlValues.Offers[curOfferI].data.Name"></p>
          <p>Price: <input type="text" v-model="xmlValues.Offers[curOfferI].data.Price"></p>
          <p>Stock quantity: <input class="input-id" type="text" v-model="xmlValues.Offers[curOfferI].data.StockQ"> Available: <input type="checkbox" v-model="xmlValues.Offers[curOfferI].Available"> <!-- available trigger stock to 0 -->
          </p>

          <p>Pictures: <button @click="modifyQuantity('+', xmlValues.Offers[curOfferI].data.Pics, 8)">+1</button></p>
          <p v-for="(el2, k2) in xmlValues.Offers[curOfferI].data.Pics" :key="el2.k2">
            <input class="pic-input" type="text" v-model="xmlValues.Offers[curOfferI].data.Pics[k2]">
            <button class="x-btn" @click="modifyQuantity('x', xmlValues.Offers[curOfferI].data.Pics, k2)">X</button>
          </p>
          <p>Category ID:
            <select class="input-id" v-model="xmlValues.Offers[curOfferI].data.CatId">
              <option disabled value="">Please select one</option>
              <option v-for="(el, k6) in xmlValues.Cat" :key="el.k6">
                {{xmlValues.Cat[k6].Id}}
              </option>
              <option v-for="(el, k10) in xmlValues.Cat" :key="el.k10">
                <p v-for="(el, k11) in xmlValues.Cat[k10].Child" :key="el.k11">
                  {{xmlValues.Cat[k10].Child[k11].Id}}
                </p> <!-- look for better way looping through children -->
              </option>
            </select>
          </p>
          <p>Description: </p>
          <textarea v-model="xmlValues.Offers[curOfferI].data.Descr"></textarea>

          <p>Parameters: <button @click="modifyQuantity('+', xmlValues.Offers[curOfferI].data.Pars)">+1</button> </p>
          <div v-for="(el3, k3) in xmlValues.Offers[curOfferI].data.Pars" :key="el3.k3">
            <p>Name: <input type="text" v-model="xmlValues.Offers[curOfferI].data.Pars[k3].Name">
              Description: <input style="width: 15rem" type="text" v-model="xmlValues.Offers[curOfferI].data.Pars[k3].Descr">
              <button class="x-btn" @click="modifyQuantity('x', xmlValues.Offers[curOfferI].data.Pars, k3)">X</button></p>
          </div>

          <p>Vendor: <input type="text" v-model="xmlValues.Offers[curOfferI].data.Vendor"> Url: <input type="text" v-model="xmlValues.Offers[curOfferI].data.Url">
            Currency ID:
            <select class="input-id" v-model="xmlValues.Offers[curOfferI].data.CurId">
              <option disabled value="">Please select one</option>
              <option v-for="(el, k7) in xmlValues.Curs" :key="el.k7">
                {{xmlValues.Curs[k7].Id}}
              </option>
            </select>
          </p>
          <button @click="addNewOffer(curOfferI)">Copy and create new Offer</button>
          <button @click="deleteOffer(curOfferI)">Delete offer</button>
        </div>

        <!-- MINI CONTAINERS -->
        <div class="offer-mini-container" v-for="(el1, k5) in xmlValues.Offers" :key="el1.k5">

          <div class="offer-mini" :style='{backgroundImage: "url("+ xmlValues.Offers[k5].data.Pics[0] + ")", backgroundSize: "auto 90%"}'>
            <p><b>{{xmlValues.Offers[k5].data.Name}}</b></p>
            <div v-for="(el3, k3) in xmlValues.Offers[k5].data.Pars" :key="el3.k3">
              <p v-if="xmlValues.Offers[k5].data.Pars[k3].Name == 'Цвет'">{{xmlValues.Offers[k5].data.Pars[k3].Name}}: {{xmlValues.Offers[k5].data.Pars[k3].Descr}}</p>
            </div>
            <div v-for="(el3, k9) in xmlValues.Offers[k5].data.Pars" :key="el3.k9">
              <p v-if="xmlValues.Offers[k5].data.Pars[k9].Name == 'Размер'">{{xmlValues.Offers[k5].data.Pars[k9].Name}}: {{xmlValues.Offers[k5].data.Pars[k9].Descr}}</p>
            </div>
            <p>Price: {{xmlValues.Offers[k5].data.Price}} {{xmlValues.Offers[k5].data.CurId}}</p>
            <p>On stock: {{xmlValues.Offers[k5].data.StockQ}} Available: <input class="checkbox-avail" type="checkbox" v-model="xmlValues.Offers[k5].Available"></p>
            <p style="font-size: 1.5rem">ID: <b>{{xmlValues.Offers[k5].Id}}</b> CAT: <b>{{xmlValues.Offers[k5].data.CatId}}</b></p>
            <button title="Edit offer" :class="{'edit-status-btn': (k5 == curOfferI)}" @click="retArrI(xmlValues.Offers[k5].Id, xmlValues.Offers)">
              <fa icon="edit"></fa>
            </button>
            <button title="Move left" @click="move(xmlValues.Offers, k5, k5-1)">
              <fa icon="chevron-left"></fa>
            </button>
            <button title="Move right" @click="move(xmlValues.Offers, k5, k5+1)">
              <fa icon="chevron-right"></fa>
            </button>
            <button title="Copy and create new offer" @click="addNewOffer(k5)">
              <fa icon="clone"></fa>
            </button>
          </div>
        </div>
      </div>

      <!--  PREVIEW XML -->

    </div>
    <div id="preview">
      <p>Preview XML <input type="checkbox" v-model="showXml">
        <button @click="download()">Download XML</button></p>
      <button @click="httpSubmit">http</button>
      <xml-preview v-show="showXml" :xmlV="xmlValues"></xml-preview>
    </div>
  </div>
</template>

<script>
import XmlPreview from "./XmlPreview";
import HeaderShopDescr from "./HeaderShopDescr";

export default {
  name: "XmlApp",
  components: {
    XmlPreview,
    HeaderShopDescr
  },

  data() {
    return {
      curPriceList: "",
      priceLists: [],

      showXml: false,
      curOfferI: "0", // index of array
      tempOfferId: "", //used in ID manual edit field to check if id already exist.
      lastID: "00001", // last used ID
      IdEditable: false,
      tagCount: {
        CurrencyCount: 1
      },
      xmlValues: {
        Xml: {
          Version: "1.0",
          Encoding: "UTF-8"
        },
        YmlDate: "2018-12-19 18:00" /* todo take todays date and time */,
        Name: "Eternity",
        Company: "Eternity",
        Url: "",
        Curs: [
          {
            Id: "UAH",
            Rate: "1"
          }
        ],
        Cat: [
          {
            Id: "1",
            Name: "Trusiki",
            Child: [
              {
                Id: "101",
                Name: "Trusy"
              }
            ]
          },
          {
            Id: "2",
            Name: "Pusiki",
            Child: [
              {
                Id: "201",
                Name: "Pussy"
              }
            ]
          }
        ],
        Offers: [
          {
            Available: "true",
            Id: "00001",
            data: {
              Url: "www.viychuklingerie.com",
              Price: "850",
              CurId: "UAH",
              CatId: "1",
              Pics: [
                "https://raw.githubusercontent.com/viylingerie/Photo/master/Elena%20silk.blck1.JPG"
              ],
              Name: "Name of Offer",
              Vendor: "Eternity",
              Descr: `<p>Нижнее белье<b>Eternity</b>Интернет магазин Eternity представляет украинский бренд нижнего женского белья Viychuk lingerie создан в 2015 году.
Мы представлены в нескольких городах Украины, Черновцы, Львов, Киев.
Наша цель - создавать комфорт и эстетику в повседневной жизни женщины, красивое белье создано не только для "особого дня" а для того чтобы Вы в нем жили.
С каждой коллекцией мы добавляем новые модели в наш ассортимент. </p>
<p> Теперь у нас можно приобрести белье с мягкими чашками, белье с косточками, купальники - целый год, боди и шелковые накидки. </p>
<p> Viychuk lingerie <b> New Collection </b> Комплект Elena silk создает ваш комфорт и нежность</p>` /* todo text editor? */,
              Pars: [
                {
                  Name: "Вид",
                  Descr: ""
                },
                {
                  Name: "Размер",
                  Descr: ""
                } /* todo choises */,
                {
                  Name: "Чашка",
                  Descr: ""
                },
                {
                  Name: "Категория",
                  Descr: ""
                },
                {
                  Name: "Цвет",
                  Descr: "Синий"
                } /* todo choises */,
                {
                  Name: "Застежка",
                  Descr: ""
                },
                {
                  Name: "Посадка трусиков",
                  Descr: ""
                },
                {
                  Name: "Бретели",
                  Descr: ""
                },
                {
                  Name: "Материал",
                  Descr: ""
                },
                {
                  Name: "Состав",
                  Descr: ""
                },
                {
                  Name: "Страна-производитель",
                  Descr: ""
                },
                {
                  Name: "Доставка/Оплата",
                  Descr: ""
                }
              ],
              StockQ: "5"
            }
          }
        ]
      }
    };
  },
  methods: {
    getDateAndTime() {
      const currentdate = new Date();
      this.xmlValues.YmlDate =
        currentdate.getFullYear() +
        "-" +
        (currentdate.getMonth() + 1) +
        "-" +
        currentdate.getDate() +
        " " +
        currentdate.getHours() +
        ":" +
        currentdate.getMinutes();
    },
    modifyQuantity(o, el, m = 999, min = 1) {
      if (o === "+") {
        if (el.length <= m - 1) {
          // m parameter used as max number of elements
          el.push(JSON.parse(JSON.stringify(el[0]))); // TODO: some empty templates because can't add new child IF id no exist
        }
      } else if (o === "x") {
        /// m parameter used as starting position for delete
        if (el.length > min) {
          // min by defauld is 1 but if 0 - all items can be deleted
          el.splice(m, 1);
        }
      }
      return;
    },
    retArrI(id, o) {
      for (let [i, k] of o.entries()) {
        if (k.Id == id) {
          this.curOfferI = i;
          return;
        }
      }
    },

    addNewOffer(curOfferI) {
      let a = JSON.parse(JSON.stringify(this.xmlValues.Offers[curOfferI]));
      this.xmlValues.Offers.push(a);
      let c = this.incIdBy1(); // increment ID with checking if already exist
      this.lastID = c;
      this.xmlValues.Offers[this.xmlValues.Offers.length - 1].Id = this.lastID;
    },

    // 3. delete offer -> Implement BIN for restore 4. change offer order
    /* change position with arrows */

    incIdBy1() {
      //function increments the ID only if it is not used in another order
      let b = parseInt(this.lastID) + 1;
      let c = "" + b;
      for (let i = 0; i < 99999; i++) {
        if (c.length < 5) {
          c = "0" + c;
        } else if (!this.checkIfIdExist(parseInt(c))) {
          return c;
        } else if (this.checkIfIdExist(parseInt(c))) {
          c = parseInt(c) + 1;
          c = "" + c;
        }
      }
    },
    checkIfIdExist(newId) {
      //checks if the ID exists in another offer
      for (let i = 0; i < this.xmlValues.Offers.length; i++) {
        if (newId == this.xmlValues.Offers[i].Id) {
          return true;
        }
      }
      return false;
    },
    verifyID(newId) {
      // used by manual edit of ID
      if (newId.length === 5 && parseInt(newId)) {
        if (newId === this.xmlValues.Offers[this.curOfferI].Id) {
          alert(`this is the same ID as before`);
        } else if (this.checkIfIdExist(newId)) {
          alert(`ID ${newId} does already exist! Choose another one!`);
        } else if (!this.checkIfIdExist(newId)) {
          this.xmlValues.Offers[this.curOfferI].Id = newId;
          this.IdEditable = false;
          this.tempOfferId = "";
        }
      } else if ((newId.length !== 5 || !parseInt(newId)) && newId !== "") {
        console.log(newId);
        alert("ID is in wrong format!");
      }
    },
    move(arr, old_index, new_index) {
      //moving offer through array left and right
      while (old_index < 0) {
        old_index += arr.length;
      }
      while (new_index < 0) {
        new_index = 0;
      }
      if (new_index >= arr.length) {
        /*                 let k = new_index - arr.length;
                                while ((k--) + 1) {
                                    arr.push(undefined);
                                } */
        return;
      }
      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
      this.xmlValues.Offers = arr;

      //FIX current edited offer when moving order through
      if (old_index == this.curOfferI) {
        this.curOfferI = new_index;
      } else if (new_index == this.curOfferI && old_index > this.curOfferI) {
        this.curOfferI = parseInt(this.curOfferI) + 1 + "";
      } else if (new_index == this.curOfferI && old_index < this.curOfferI) {
        this.curOfferI = parseInt(this.curOfferI) - 1 + "";
      }
      return;
    },
    deleteOffer(curI) {
      if (this.xmlValues.Offers.length > 1) {
        let answer = confirm(
          `Sure to delete offer ${
            this.xmlValues.Offers[curI].data.Name
          } whith ID: ${this.xmlValues.Offers[curI].Id}`
        );
        if (answer) {
          if (this.xmlValues.Offers.length === parseInt(curI) + 1) {
            this.curOfferI = parseInt(curI) - 1 + "";
          }
          this.xmlValues.Offers.splice(parseInt(curI), 1);
        }
      } else {
        alert(`You cant delete the last existing order!`);
      }
      return;
    },

    download() {
      const text = document.querySelector("pre").innerText;
      const filename = "PriceFile.xml";

      var element = document.createElement("a");
      element.setAttribute(
        "href",
        "data:text/plain;charset=utf-8," + encodeURIComponent(text)
      );
      element.setAttribute("download", filename);

      element.style.display = "none";
      document.body.appendChild(element);

      element.click();

      document.body.removeChild(element);
    },
    httpSubmit() {
      this.$http.post(firebase, this.showXml).then(
        response => {
          console.log(response);
        },
        error => {
          console.log(error);
        }
      );
    }
  },
  filters: {},
  watch: {}
};
</script>

<style>
* {
  text-align: left;
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}

#grid {
  display: grid;
  grid-template-columns: 9fr 4fr;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0.8rem 0 0.8rem 1rem;
}

p {
  margin: 0.2rem;
}

button {
  /* replace buttons with this class */
  margin: 0.2rem 0.3rem;
  border-radius: 1rem;
  border: 0.1rem solid grey;
  transition-duration: 0.4s;
  background-color: white;
  cursor: pointer;
}

button:hover {
  box-shadow: 1px 2px 3px 0 rgba(0, 0, 0, 0.24),
    2px 2px 3px 0 rgba(0, 0, 0, 0.19);
}

button:focus,
input:focus {
  outline: none;
}

input {
  border-radius: 0.3rem;
}

.input-id {
  width: 3.5rem;
  border-radius: 0.3rem;
}

#preview * {
  font-size: 0.8rem;
  max-width: 500px;
  overflow: auto;
}

/* #forms {

} */
.offer {
  width: 90%;
  overflow: hidden;
  margin: 10px auto 0 5px;
  padding: 10px;
  background: #eee;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.pic-input {
  width: 600px;
}

textarea {
  width: 800px;
  height: 150px;
}

.x-btn,
.x-btn:hover {
  border: none;
  color: red;
  background: none;
  text-shadow: 1px 1px 1px black, -1px -1px 1px white;
  box-shadow: none;
  outline: none;
}

.content-box {
  border: 1px solid rgb(202, 202, 202);
  border-radius: 10px;
  margin: 0 0 5px 0;
  padding: 0;
}

.offer-mini-container {
  display: inline-block;
  width: 200px;
  margin: 1rem 0 0 1rem;
}

.offer-mini {
  border: 1px solid black;
  border-radius: 15px;
  background-color: rgba(255, 150, 118, 0.87);
}

fa {
  cursor: pointer;
}

.offer-mini button {
  background: none;
  margin: 0.2rem 0.3rem;
  width: 2.3rem;
  height: 2.3rem;
  box-shadow: none;
  text-shadow: none;
  border-radius: 1rem;
  padding: 0.6rem;
  text-align: center;
  border: 1px solid gray;
  background-color: rgba(255, 255, 255, 0.473);
}

.offer-mini .edit-status-btn {
  background: rgba(216, 96, 96, 0.822);
  color: white;
}

.offer-mini p {
  text-shadow: 1px 1px 2px white, -1px -1px 2px white, 0px 0px 5px white;
}

.checkbox-avail[type="checkbox"] {
  appearance: none;
  margin: 0;
  /* Styling checkbox */
  width: 16px;
  height: 16px;
  vertical-align: bottom;
  position: relative;
  bottom: 1px;
  box-shadow: 0px 0px 5px white;
  border: 1px solid gray;
  cursor: pointer;
  background-color: rgba(255, 55, 55, 0.849);
}

.checkbox-avail[type="checkbox"]:checked {
  background-color: rgba(31, 129, 31, 0.849);
}

/* spoiler */
input[id^="spoiler"] {
  display: none;
}

input[id^="spoiler"] + label {
  display: block;
  width: 150px;
  margin: 0 auto 0 20px;
  padding: 5px 20px;
  background: rgb(99, 170, 99);
  border: 1px solid #333;
  color: #fff;
  text-align: center;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.6s;
}

input[id^="spoiler"]:checked + label {
  color: #333;
  background: #ccc;
}

input[id^="spoiler"] ~ .spoiler {
  width: 90%;
  height: 0;
  overflow: hidden;
  opacity: 0;
  margin: 5px auto 0 5px;
  padding: 2px;
  background: #eee;
  border: 1px solid #ccc;
  border-radius: 8px;
  transition: all 0.6s;
}

input[id^="spoiler"]:checked + label + .spoiler {
  height: auto;
  opacity: 1;
  padding: 10px;
}

/* spoiler end */
</style>
